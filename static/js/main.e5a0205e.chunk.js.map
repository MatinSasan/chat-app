{"version":3,"sources":["components/Message.js","components/MessageList.js","components/SendMessageForm.js","components/RoomList.js","components/NewRoomForm.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Message","props","react_default","a","createElement","className","userName","text","MessageList","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","node","ReactDOM","findDOMNode","scrollTop","scrollHeight","roomId","messages","map","message","index","senderId","parts","payload","content","Component","SendMessageForm","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","concat","state","handleChange","e","setState","target","handleSubmit","preventDefault","sendMessage","onSubmit","onChange","placeholder","type","RoomList","orderedRooms","toConsumableArray","rooms","sort","b","id","room","active","onClick","subscribeToRoom","href","name","NewRoomForm","roomName","createRoom","required","App","joinableRooms","joinedRooms","getRooms","currentUser","getJoinableRooms","then","catch","err","console","log","subscribeToRoomMultipart","hooks","onMessage","sendMultipartMessage","_this2","Chatkit","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","components_RoomList","components_MessageList","components_SendMessageForm","components_NewRoomForm","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5a0205e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Message(props) {\r\n  return (\r\n    <div>\r\n      <div className='message'>\r\n        <div className='message-username'>{props.userName}</div>\r\n        <div className='message-text'>{props.text}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Message from \"./Message\";\r\n\r\nexport class MessageList extends Component {\r\n  componentDidUpdate() {\r\n    const node = ReactDOM.findDOMNode(this);\r\n    node.scrollTop = node.scrollHeight;\r\n\r\n    // this.shouldScrollToBottom =\r\n    //   node.scrollTop + node.clientHeight + 100 >= node.scrollHeight;\r\n    // if (this.shouldScrollToBottom) {\r\n    //   node.scrollTop = node.scrollHeight;\r\n    // }\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.roomId) {\r\n      return (\r\n        <div className='message-list'>\r\n          <div className='join-room'>&larr; Join a room!</div>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className='message-list'>\r\n        {this.props.messages.map((message, index) => {\r\n          return (\r\n            <Message\r\n              key={index}\r\n              userName={message.senderId}\r\n              text={message.parts[0].payload.content}\r\n              // text={message.map(item => item.payload.content)}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageList;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class SendMessageForm extends Component {\r\n  state = {\r\n    message: \"\"\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      message: e.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.sendMessage(this.state.message);\r\n    this.setState({\r\n      message: \"\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className='send-message-form'>\r\n        <input\r\n          onChange={this.handleChange}\r\n          value={this.state.message}\r\n          placeholder='Type your message and hit ENTER'\r\n          type='text'\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SendMessageForm;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class RoomList extends Component {\r\n  render() {\r\n    const orderedRooms = [...this.props.rooms].sort((a, b) => a.id - b.id);\r\n\r\n    return (\r\n      <div className='rooms-list'>\r\n        <ul>\r\n          <h3>Your rooms: </h3>\r\n          {orderedRooms.map(room => {\r\n            const active = room.id === this.props.roomId ? \"active\" : \"\";\r\n\r\n            return (\r\n              <li key={room.id} className={\"room \" + active}>\r\n                <a onClick={() => this.props.subscribeToRoom(room.id)} href='#'>\r\n                  # {room.name}\r\n                </a>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoomList;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class NewRoomForm extends Component {\r\n  state = {\r\n    roomName: \"\"\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      roomName: e.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.createRoom(this.state.roomName);\r\n    this.setState({ roomName: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='new-room-form'>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            value={this.state.roomName}\r\n            onChange={this.handleChange}\r\n            type='text'\r\n            placeholder='Create a room'\r\n            required\r\n          />\r\n          <button id='create-room-btn' type='submit' />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewRoomForm;\r\n","import React, { Component } from \"react\";\n\nimport MessageList from \"./components/MessageList\";\nimport SendMessageForm from \"./components/SendMessageForm\";\nimport RoomList from \"./components/RoomList\";\nimport NewRoomForm from \"./components/NewRoomForm\";\n\nimport \"./App.css\";\nimport Chatkit from \"@pusher/chatkit-client\";\n\nimport { instanceLocator, tokenUrl } from \"./config\";\n\n// Yes, I've made this. Thank you for reading :)\n\nclass App extends Component {\n  state = {\n    roomId: null,\n    messages: [],\n    joinableRooms: [],\n    joinedRooms: []\n  };\n\n  // since the keys are hidden, the original app cannot operate on github\n\n  componentDidMount() {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator, //sorry,hidden the keys, so the app can't work :(\n      userId: \"Max\",\n      tokenProvider: new Chatkit.TokenProvider({\n        url: tokenUrl //hidden the keys too, so the app can't work\n      })\n    });\n\n    chatManager\n      .connect()\n      .then(currentUser => {\n        this.currentUser = currentUser;\n        this.getRooms();\n        // this.subscribeToRoom();\n      })\n      .catch(err => {\n        console.log(\"Error on conection\", err);\n      });\n  }\n\n  getRooms = () => {\n    this.currentUser\n      .getJoinableRooms()\n      .then(joinableRooms => {\n        this.setState({\n          joinableRooms,\n          joinedRooms: this.currentUser.rooms\n        });\n      })\n      .catch(err => console.log(\"error\", err));\n  };\n\n  subscribeToRoom = roomId => {\n    this.setState({ messages: [] });\n    this.currentUser\n      .subscribeToRoomMultipart({\n        roomId,\n        hooks: {\n          onMessage: message => {\n            this.setState({\n              messages: [...this.state.messages, message]\n            });\n          }\n        }\n      })\n      .then(room => {\n        console.log(\"roomId\", room);\n        this.setState({\n          roomId: room.id\n        });\n        this.getRooms();\n      })\n      .catch(err => console.log(\"Error on subscription\", err));\n  };\n\n  sendMessage = text => {\n    this.currentUser.sendMultipartMessage({\n      roomId: this.state.roomId,\n      parts: [{ type: \"text/plain\", content: text }]\n    });\n  };\n\n  createRoom = name => {\n    this.currentUser\n      .createRoom({\n        name\n      })\n      .then(room => this.subscribeToRoom(room.id))\n      .catch(err => console.log(`Error: ${err}`));\n  };\n\n  render() {\n    console.log(\"messages\", this.state.messages);\n    return (\n      <div className='App'>\n        <RoomList\n          roomId={this.state.roomId}\n          subscribeToRoom={this.subscribeToRoom}\n          rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]}\n        />\n        <MessageList\n          roomId={this.state.roomId}\n          messages={this.state.messages}\n        />\n        <SendMessageForm sendMessage={this.sendMessage} />\n        <NewRoomForm createRoom={this.createRoom} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const instanceLocator = \"v1:us1:8ffb831b-d84a-44bd-a5c5-965b45b710f0\";\r\nconst tokenUrl =\r\n  \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/8ffb831b-d84a-44bd-a5c5-965b45b710f0/token\";\r\n\r\nexport { instanceLocator, tokenUrl };\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}